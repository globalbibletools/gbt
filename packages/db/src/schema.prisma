// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  // rhel-openssl is needed to use the prisma client on lambda.
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  // pgcrypto is necessary for ULIDs which are better than random UUIDs.
  extensions = [pgcrypto]
}

enum EmailStatus {
  UNVERIFIED
  VERIFIED
  BOUNCED
  COMPLAINED
}

/// A user who can authenticate into the system.
model User {
  /// The ID of the user.
  id             String      @id @default(dbgenerated("generate_ulid()")) @db.Uuid
  /// The display name of the user.
  name           String?
  /// The email address of the user.
  email          String      @unique
  /// The status of the email (whether we can send emails or not).
  emailStatus    EmailStatus @default(UNVERIFIED)
  /// The user's password protected by a hash
  hashedPassword String?

  /// The list of system roles this user has
  systemRoles        UserSystemRole[]
  /// The list of sessions for the user.
  sessions           Session[]
  /// The language import jobs that this user has started.
  importJobs         LanguageImportJob[]
  /// The roles for this user on all languages.
  languageRoles      LanguageMemberRole[]
  /// The list of emails awaiting verification.
  emailVerifications UserEmailVerification[]
  /// The list of gloss updates this user has performed.
  glossHistory       GlossHistoryEntry[]
  /// The list of translator notes authored by this user.
  translatorNotes    TranslatorNote[]
  /// The list of footnotes authored by this user.
  footnotes          Footnote[]
  /// An invitation for the user.
  invitation         UserInvitation?
  /// The password reset tokens connected to this user.
  passwordResetToken ResetPasswordToken[]
  /// The list of phrase events the user created.
  phraseEvents       PhraseEvent[]

  @@map("User")
}

/// A authenticated session for a user.
model Session {
  /// The ID of the session as stored in the cookie.
  id        String   @id @unique
  /// The time that the session will expire.
  expiresAt DateTime
  /// The id of the authenticated user
  userId    String   @db.Uuid
  /// The authenticated user.
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@index([userId])
}

model UserInvitation {
  /// The id of the authenticated user
  userId  String @unique @db.Uuid
  /// The authenticated user.
  user    User   @relation(references: [id], fields: [userId], onDelete: Cascade)
  /// The token used to verify the invitation
  token   String @id
  /// The date the invitation token is no longer valid
  expires BigInt
}

model ResetPasswordToken {
  /// The id of the user who is resetting their password
  userId  String @db.Uuid
  /// The user who is resetting their password.
  user    User   @relation(references: [id], fields: [userId], onDelete: Cascade)
  /// The token used to verify the reset password action
  token   String @id
  /// The date this token is no longer valid
  expires BigInt
}

/// A new email for a user awaiting verification.
model UserEmailVerification {
  /// The ID of the user whose email needs to be verified.
  userId  String @db.Uuid
  /// The user whose email needs to be verified.
  user    User   @relation(references: [id], fields: [userId], onDelete: Cascade)
  /// The email address being verified.
  email   String
  /// The token being used for verification.
  token   String @id @unique
  /// The date the verification token is no longer valid.
  expires BigInt
}

enum SystemRole {
  ADMIN
}

/// A system level role for a user.
model UserSystemRole {
  /// The user with the role.
  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  /// The ID of the user with the role.
  userId String     @db.Uuid
  /// The role given to the user.
  role   SystemRole

  @@id([userId, role])
}

/// A book of the Bible.
model Book {
  /// The ID of the book. Corresponds to its order in the Bible.
  id     Int     @id
  /// The three letter code used to for look ups from references.
  name   String  @unique
  /// The list of verses in the book.
  verses Verse[]
}

/// A verse within a Book of the Bible.
model Verse {
  /// The ID of the verse in the format `BBCCCVVV`.
  id      String @id
  /// The verse number as it appears in most Bibles.
  number  Int
  /// The chapter number as it appears in most Bibles.
  chapter Int
  /// The book the verse belongs in.
  book    Book   @relation(fields: [bookId], references: [id])
  /// The ID of the book the verse belongs in.
  bookId  Int
  /// The list of words in the verse.
  words   Word[]

  @@unique([bookId, chapter, number])
}

/// A single word within a verse.
model Word {
  /// The ID of the verse in the format `BBCCCVVVWW`. The last two digits are in order as the words appear in the verse.
  id             String              @id
  /// The text in Greek, Hebrew, or Aramaic as it appears in the critical text.
  text           String
  /// The verse the word appears in.
  verse          Verse               @relation(fields: [verseId], references: [id])
  /// The ID of the verse the word appears in.
  verseId        String
  /// The specific form of the lemma for the word.
  form           LemmaForm           @relation(fields: [formId], references: [id])
  /// The ID of the specific form of the lemma for the word.
  formId         String
  /// The gloss history of this word.
  glossHistory   GlossHistoryEntry[]
  /// The list of machine glosses in different languages for this word.
  machineGlosses MachineGloss[]
  /// The list of phrases this word is connected to in different languages.
  phrases        PhraseWord[]

  @@index([formId])
  @@index([verseId])
}

/// A form of a lemma. This are differentiated by grammatical forms, as well as suffixes and prefixes.
model LemmaForm {
  /// The ID of the form in the format `[H|G]<strongs>-<random id>`. Examples: H245-2, G1243-12
  id      String @id
  /// The grammar code for this form.
  grammar String
  /// The lemma that contains this form and its siblings.
  lemma   Lemma  @relation(fields: [lemmaId], references: [id])
  /// The ID of the lemma that contains this form and its siblings.
  lemmaId String
  /// The list of words in verses that share this form of the lemma.
  word    Word[]

  @@index([lemmaId])
}

/// A lemma as defined by strongs numbers.
model Lemma {
  /// The ID of the lemma in the format `[H|G]<strongs>`. Examples: H243, G1243
  id        String          @id
  /// The list of forms of the lemma.
  forms     LemmaForm[]
  /// The list of resource entries associated with the lemma.
  resources LemmaResource[]
}

enum TextDirection {
  ltr
  rtl
}

/// A language use for translation.
model Language {
  /// The ID of the language. This is distinct from the IETF language code.
  id                  String               @id @default(dbgenerated("generate_ulid()")) @db.Uuid
  /// The IETF language code.
  code                String               @unique
  /// The localized name of the language.
  name                String
  /// The English name of the font selected for this language.
  font                String               @default("Noto Sans")
  /// The direction the text goes in the language.
  textDirection       TextDirection        @default(ltr)
  /// The list of Bible translation IDs associated with this language.
  bibleTranslationIds String[]
  // The gloss history for this language.
  glossHistory        GlossHistoryEntry[]
  /// The list of machine glosses of different words for this language.
  machineGlosses      MachineGloss[]
  /// The list of roles for members of this language.
  roles               LanguageMemberRole[]
  /// The pending import job if any.
  importJob           LanguageImportJob?
  /// The phrases in this language.
  phrases             Phrase[]
}

/// Keeps track of a language import job.
model LanguageImportJob {
  /// The language that is being imported
  language   Language  @relation(fields: [languageId], references: [id])
  /// The ID of the language that is being imported.
  languageId String    @id @db.Uuid
  /// The user who started this import job.
  user       User?     @relation(fields: [userId], references: [id])
  /// The ID of the user who started this import job.
  userId     String?   @db.Uuid
  /// The start date of the import job
  startDate  DateTime
  /// The end date of the import job
  endDate    DateTime?
  /// Whether the import succeeded.
  succeeded  Boolean?
}

enum LanguageRole {
  ADMIN
  TRANSLATOR
  VIEWER
}

/// A role given to a user for a language.
model LanguageMemberRole {
  /// The user who is granted the role for the language.
  user       User         @relation(fields: [userId], references: [id])
  /// The ID of the user who is granted the role for the language.
  userId     String       @db.Uuid
  /// The language the user is given the role for.
  language   Language     @relation(fields: [languageId], references: [id])
  /// The ID of the language the user is given the role for.
  languageId String       @db.Uuid
  /// The role given to the user for the language.
  role       LanguageRole

  @@id([languageId, userId, role])
}

/// A phrase connects one or more words into a single unit for a single language.
model Phrase {
  id         Int      @id @default(autoincrement())
  /// The language the phrase belongs to.
  language   Language @relation(fields: [languageId], references: [id])
  /// The ID of the language the phrase belongs to.
  languageId String   @db.Uuid

  /// The list of words in the phrase.
  words          PhraseWord[]
  /// The gloss for the phrase
  gloss          Gloss?
  /// The translator note for the phrase.
  translatorNote TranslatorNote?
  /// The footnote for the phrase.
  footnote       Footnote?
  /// The list of events for the phrase.
  events         PhraseEvent[]

  @@index([languageId])
}

/// Connects one or more words to a phrase in a language.
model PhraseWord {
  /// The phrase the word is in.
  phrase   Phrase @relation(fields: [phraseId], references: [id], onDelete: Cascade)
  /// The ID of the phrase the word is in.
  phraseId Int
  /// The word being connected to a phrase.
  word     Word   @relation(fields: [wordId], references: [id])
  /// The ID of the word being connecte to a phrase.
  wordId   String

  @@id([phraseId, wordId])
  @@index([wordId])
}

/// Records an event about a phrase
model PhraseEvent {
  /// The unique ID of the event.
  id Int @id @default(autoincrement())

  /// The phrase the event describes.
  phrase   Phrase @relation(fields: [phraseId], references: [id], onDelete: Cascade)
  /// The ID of the phrase the event describes.
  phraseId Int

  /// The user who created the event.
  user   User?   @relation(fields: [userId], references: [id])
  /// The ID of the user who created the event.
  userId String? @db.Uuid

  /// The type of event.
  type   PhraseEventType? @relation(fields: [typeId], references: [id])
  /// The ID of the event type.
  typeId Int

  /// The date and time of the event.
  timestamp DateTime
  /// The payload of the event.
  data      Json?
}

/// Diferentiates event types.
model PhraseEventType {
  /// The unique ID of the event type
  id     Int           @id @default(autoincrement())
  /// The event code.
  code   String @unique
  /// All phrase events of this type.
  events PhraseEvent[]
}

enum GlossState {
  APPROVED
  UNAPPROVED
}

/// A gloss of a word in a particular language.
model Gloss {
  /// The phrase the gloss applies to.
  phrase   Phrase     @relation(fields: [phraseId], references: [id])
  /// The ID of phrase the gloss applies to.
  phraseId Int        @id
  /// The text of the gloss.
  gloss    String?
  /// The approval state of the gloss.
  state    GlossState @default(UNAPPROVED)

  @@index([phraseId])
}

/// Represents a gloss update for a particular language.
model GlossHistoryEntry {
  /// The word whose gloss is being updated.
  word       Word        @relation(fields: [wordId], references: [id])
  /// The ID of the word whose gloss is being updated.
  wordId     String
  /// The language of the updated gloss.
  language   Language    @relation(fields: [languageId], references: [id])
  /// The ID of the language of the updated gloss.
  languageId String      @db.Uuid
  /// The timestamp when the gloss was updated.
  timestamp  DateTime    @default(now())
  /// The user who updated the gloss.
  user       User?       @relation(fields: [userId], references: [id])
  /// The ID of the user who updated the gloss
  userId     String?     @db.Uuid
  /// The updated text of the gloss. Null indicates no change.
  gloss      String?
  /// The updated approval state of the gloss. Null indicate no change.
  state      GlossState?
  /// The source of the gloss. Tells whether this history entry came from an import or a direct gloss update.
  source     GlossSource

  @@id([wordId, languageId, timestamp])
}

enum GlossSource {
  USER
  IMPORT
}

/// A machine generated gloss of a word in a particular language.
model MachineGloss {
  /// The word being glossed.
  word       Word     @relation(fields: [wordId], references: [id])
  /// The ID of the word being glossed.
  wordId     String
  /// The language of the gloss.
  language   Language @relation(fields: [languageId], references: [id])
  /// The ID of the language of the gloss.
  languageId String   @db.Uuid
  /// The text of the gloss.
  gloss      String?

  @@id([wordId, languageId])
}

/// An entry in a study resource associated with a particular lemma.
model LemmaResource {
  /// The lemma that this entry is associated with.
  lemma        Lemma        @relation(fields: [lemmaId], references: [id])
  /// The ID of the lemma that this entry is associated with.
  lemmaId      String
  /// The resource this data comes from.
  resourceCode ResourceCode
  /// The actual content of the resource entry.
  content      String

  @@id([lemmaId, resourceCode])
  @@index([lemmaId])
}

enum ResourceCode {
  BDB
  LSJ
  STRONGS
}

/// The translator note for a word in a particular language.
model TranslatorNote {
  /// The phrase the note applies to.
  phrase    Phrase   @relation(fields: [phraseId], references: [id])
  /// The ID of phrase the note applies to.
  phraseId  Int      @id
  /// The author of the most recent update to the note.
  author    User     @relation(fields: [authorId], references: [id])
  /// The ID of the author of the most recent update to the note.
  authorId  String   @db.Uuid
  /// The timestamp of the last update.
  timestamp DateTime
  /// The content of the note.
  content   String

  @@index([phraseId])
}

/// The footnote for a word in a particular language.
model Footnote {
  /// The phrase the note applies to.
  phrase    Phrase   @relation(fields: [phraseId], references: [id])
  /// The ID of phrase the note applies to.
  phraseId  Int      @id
  /// The author of the most recent update to the note.
  author    User     @relation(fields: [authorId], references: [id])
  /// The ID of the author of the most recent update to the note.
  authorId  String   @db.Uuid
  /// The timestamp of the last update.
  timestamp DateTime
  /// The content of the note.
  content   String

  @@index([phraseId])
}
