// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  // rhel-openssl is needed to use the prisma client on lambda.
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  // pgcrypto is necessary for ULIDs which are better than random UUIDs.
  extensions = [pgcrypto]
}

enum EmailStatus {
  UNVERIFIED
  VERIFIED
  BOUNCED
  COMPLAINED
}

/// A user who can authenticate into the system.
model AuthUser {
  /// The ID of the user.
  id                 String                  @id @default(dbgenerated("generate_ulid()")) @db.Uuid
  /// The display name of the user.
  name               String?
  /// The status of the email (whether we can send emails or not).
  emailStatus        EmailStatus             @default(UNVERIFIED)
  /// The list of system roles this user has
  systemRoles        UserSystemRole[]
  /// The list of sessions for the user.
  auth_session       AuthSession[]
  /// The list of auth keys for the user
  auth_key           AuthKey[]
  /// The roles for this user on all languages.
  languageRoles      LanguageMemberRole[]
  /// The list of emails awaiting verification.
  emailVerifications UserEmailVerification[]

  @@map("User")
}

/// A authenticated session for a user.
model AuthSession {
  /// The ID of the session as stored in the cookie.
  id             String   @id @unique
  /// The id of the authenticated user
  user_id        String   @db.Uuid
  /// The time that the session will expire.
  active_expires BigInt
  /// The time that the session will become idle.
  idle_expires   BigInt
  /// The authenticated user.
  auth_user      AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("Session")
}

/// A authentication method for a user.
model AuthKey {
  /// The ID of the key, will usually contain a key type and value.
  id              String   @id @unique
  /// The encrypted password, if the key supports it.
  hashed_password String?
  /// The ID of the user the key is for.
  user_id         String   @db.Uuid
  /// Whether this is the primary key that cannot be deleted.
  primary_key     Boolean
  /// The date that the key is no longer valid
  expires         BigInt?
  /// The user the key is for.
  auth_user       AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("UserAuthentication")
}

/// A new email for a user awaiting verification.
model UserEmailVerification {
  /// The ID of the user whose email needs to be verified.
  userId  String   @db.Uuid
  /// The user whose email needs to be verified.
  user    AuthUser @relation(references: [id], fields: [userId], onDelete: Cascade)
  /// The email address being verified.
  email   String
  /// The token being used for verification.
  token   String   @id @unique
  /// The date the verification token is no longer valid.
  expires BigInt
}

enum SystemRole {
  ADMIN
}

/// A system level role for a user.
model UserSystemRole {
  /// The user with the role.
  user   AuthUser   @relation(fields: [userId], references: [id], onDelete: Cascade)
  /// The ID of the user with the role.
  userId String     @db.Uuid
  /// The role given to the user.
  role   SystemRole

  @@id([userId, role])
}

/// A book of the Bible.
model Book {
  /// The ID of the book. Corresponds to its order in the Bible.
  id     Int     @id
  /// The three letter code used to for look ups from references.
  name   String  @unique
  /// The list of verses in the book.
  verses Verse[]
}

/// A verse within a Book of the Bible.
model Verse {
  /// The ID of the verse in the format `BBCCCVVV`.
  id           String             @id
  /// The verse number as it appears in most Bibles.
  number       Int
  /// The chapter number as it appears in most Bibles.
  chapter      Int
  /// The book the verse belongs in.
  book         Book               @relation(fields: [bookId], references: [id])
  /// The ID of the book the verse belongs in.
  bookId       Int
  /// The list of words in the verse.
  words        Word[]

  @@unique([bookId, chapter, number])
}

/// A single word within a verse.
model Word {
  /// The ID of the verse in the format `BBCCCVVVWW`. The last two digits are in order as the words appear in the verse.
  id      String    @id
  /// The text in Greek, Hebrew, or Aramaic as it appears in the critical text.
  text    String
  /// The verse the word appears in.
  verse   Verse     @relation(fields: [verseId], references: [id])
  /// The ID of the verse the word appears in.
  verseId String
  /// The specific form of the lemma for the word.
  form    LemmaForm @relation(fields: [formId], references: [id])
  /// The ID of the specific form of the lemma for the word.
  formId  String
  /// The list of glosses in different languages for this word.
  glosses Gloss[]
}

/// A form of a lemma. This are differentiated by grammatical forms, as well as suffixes and prefixes.
model LemmaForm {
  /// The ID of the form in the format `[H|G]<strongs>-<random id>`. Examples: H245-2, G1243-12
  id      String @id
  /// The grammar code for this form.
  grammar String
  /// The lemma that contains this form and its siblings.
  lemma   Lemma  @relation(fields: [lemmaId], references: [id])
  /// The ID of the lemma that contains this form and its siblings.
  lemmaId String
  /// The list of words in verses that share this form of the lemma.
  word    Word[]
}

/// A lemma as defined by strongs numbers.
model Lemma {
  /// The ID of the lemma in the format `[H|G]<strongs>`. Examples: H243, G1243
  id        String          @id
  /// The list of forms of the lemma.
  forms     LemmaForm[]
  /// The list of resource entries associated with the lemma.
  resources LemmaResource[]
}

enum TextDirection {
  ltr
  rtl
}

/// A language use for translation.
model Language {
  /// The ID of the language. This is distinct from the IETF language code.
  id                  String               @id @default(dbgenerated("generate_ulid()")) @db.Uuid
  /// The IETF language code.
  code                String               @unique
  /// The localized name of the language.
  name                String
  /// The English name of the font selected for this language.
  font                String               @default("Noto Sans")
  /// The direction the text goes in the language.
  textDirection       TextDirection        @default(ltr)
  /// The list of Bible translation IDs associated with this language.
  bibleTranslationIds String[]
  /// The list of glosses of different words for this language.
  glosses             Gloss[]
  /// The list of roles for members of this language.
  roles               LanguageMemberRole[]
  /// The pending import job if any.
  importJob           LanguageImportJob?
}

/// Keeps track of a language import job.
model LanguageImportJob {
  /// The language that is being imported
  language   Language  @relation(fields: [languageId], references: [id])
  /// The ID of the language that is being imported.
  languageId String    @id @db.Uuid
  /// The start date of the import job
  startDate  DateTime
  /// The end date of the import job
  endDate    DateTime?
  /// Whether the import succeeded.
  succeeded  Boolean?
}

enum LanguageRole {
  ADMIN
  TRANSLATOR
  VIEWER
}

/// A role given to a user for a language.
model LanguageMemberRole {
  /// The user who is granted the role for the language.
  user       AuthUser     @relation(fields: [userId], references: [id])
  /// The ID of the user who is granted the role for the language.
  userId     String       @db.Uuid
  /// The language the user is given the role for.
  language   Language     @relation(fields: [languageId], references: [id])
  /// The ID of the language the user is given the role for.
  languageId String       @db.Uuid
  /// The role given to the user for the language.
  role       LanguageRole

  @@id([languageId, userId, role])
}

enum GlossState {
  APPROVED
  UNAPPROVED
}

/// A gloss of a word in a particular language.
model Gloss {
  /// The word being glossed.
  word       Word       @relation(fields: [wordId], references: [id])
  /// The ID of the word being glossed.
  wordId     String
  /// The language of the gloss.
  language   Language   @relation(fields: [languageId], references: [id])
  /// The ID of the language of the gloss.
  languageId String     @db.Uuid
  /// The text of the gloss.
  gloss      String?
  /// The approval state of the gloss.
  state      GlossState @default(UNAPPROVED)

  @@id([wordId, languageId])
}

/// An entry in a study resource associated with a particular lemma.
model LemmaResource {
  /// The lemma that this entry is associated with.
  lemma        Lemma        @relation(fields: [lemmaId], references: [id])
  /// The ID of the lemma that this entry is associated with.
  lemmaId      String
  /// The resource this data comes from.
  resourceCode ResourceCode
  /// The actual content of the resource entry.
  content      String

  @@id([lemmaId, resourceCode])
}

enum ResourceCode {
  BDB
  LSJ
  STRONGS
}
